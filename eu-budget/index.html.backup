<!DOCTYPE html>

<head>
<title>
Visualiser le budget de l’UE pour 2018 <a href="http://www.consilium.europa.eu/fr/policies/eu-annual-budget/2018/">Source</a>
</title>
<meta charset="utf-8">
</head>

<style>
  
svg{
  position: relative;
  z-index:0;
}

text {
      paint-order: stroke;
      stroke-opacity: 0.5;
    }

line {
opacity: 0.2;

  }

.nodes, .labels:hover{
  cursor: pointer;
}

</style>

<body>

Budget de l’UE pour 2018

</body> 
<link rel = "stylesheet" href = "http://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<script src="https://d3js.org/d3.v4.min.js"></script>
<link href="https://fonts.googleapis.com/css?family=Architects+Daughter" rel="stylesheet">
<script>

var color = d3.scaleOrdinal(d3.schemeCategory20);
  
// chart dimensions
var width  = window.innerWidth - 40, height = window.innerHeight - 40, radius = 0;

var node;

// set up svg  
var svg = d3.select("body")
  .append("svg")
  .attr("width", width)
  .attr("height", height)
  .call(d3
    .zoom()
    .on("zoom", redraw)
  )
  .append("g");

function redraw() {
  svg.attr("transform", d3.event.transform)
  node.attr("font-size", (15 / d3.event.scale) + "px");
}



d3.json("data.json", function(error, graph) {
  
  var link = svg.append("g")
                .style("stroke", "#aaa")
                .selectAll("line")
                .data(graph.links)
                .enter().append("line")
                // .attr("stroke-width", function(d) {
                //   // console.log(d.target);
                //   return (d.target.value); })
                ;

var simulation = d3.forceSimulation(nodes)
  .force('charge', d3.forceManyBody().strength(5))
  .force("center", d3.forceCenter(width / 2, height / 2))
  .force('collision', d3.forceCollide().radius((d) => {console.log("yo");return d.value * 2}))
  .on('tick', ticked);

node = svg
  .append("g")
  .attr("class", "nodes")
  .selectAll("circle")
  .data(graph.nodes)
  .enter()
  .append("circle")
  .attr("stroke", "white")
  .attr("stroke-width", 1)
  // .attr("r", 7)
  .attr("r", function(d){return (d.value/2);})
  .style("fill", function(d){return color(d.id);})
  .call(d3.drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          // .on("end", dragended)
  );

node.on("mouseover", function (d) {
  node.attr("stroke", function(n) {
    if (d === n)
      return "black"
    else
      return "white"
  });
  link.style('opacity', function(l) {
    if (d === l.source || d === l.target)
      return 1;
    else 
      return 0.2;
    
  });
  link
    .style('stroke-dasharray', function(l) {
      if (d === l.target)
        return "5, 5";
      else
        return null;
    });
})

  var label = svg.append("g")
      .attr("class", "labels")
      .selectAll("text")
      .data(graph.nodes)
      .enter()
      .append("text")
      .attr('text-anchor', 'middle')
        .attr('dominant-baseline', 'central')
        .style('font-family', "Roboto")
        .text(function (d) {return d.id + "\n" + d.value + " Milliards €";})
        .attr("stroke", "white")
        .attr("stroke-width", "1px")
        .call(d3.drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended));

label.on("mouseover", function (d) {
  node.attr("stroke", function(n) {
    if (d === n)
      return "black"
    else
      return "white"
  });
  link.style('opacity', function(l) {
    if (d === l.source || d === l.target)
      return 1;
    else 
      return 0.2;
    
  });
  link
      .style('stroke-dasharray', function(l) {
        if (d === l.target)
          return "5, 5";
        else
          return null;
    });
})

label.append("title")
  .text(function(d) { return d.id; });

simulation
  .nodes(graph.nodes)
  .on("tick", ticked);

simulation
  .force("link")
  .links(graph.links);

  
  function ticked() {
    
    //update link positions
    link
      .attr("x1", function(d) { return d.source.x; })
      .attr("y1", function(d) { return d.source.y; })
      .attr("x2", function(d) { return d.target.x; })
      .attr("y2", function(d) { return d.target.y; })
    // update link stroke width
      .attr("stroke-width", function(d){return (d.target.value)})
    // update node positions    
    // note in this example we bound the positions
    node.attr("cx", function(d) { 
      return d.x = Math.max(radius, Math.min(width - radius, d.x));
    })
      .attr("cy", function(d) { 
      return d.y = Math.max(radius, Math.min(height - radius, d.y)); 
    });
    
    // update label positions
    label
    		.attr("x", function(d) { return d.x; })
        .attr("y", function (d) { return d.y; })
        
  }
  

});
    
function dragstarted(d) {
  if (!d3.event.active) simulation.alphaTarget(0.3).restart()
  d.fx = d.x;
  d.fy = d.y;
}

function dragged(d) {
  d.fx = d3.event.x;
  d.fy = d3.event.y;
}

function dragended(d) {
	if (!d3.event.active) simulation.alphaTarget(0);
  d.fx = null;
  d.fy = null;
}

// {"source": "", "target": "", "value":},

</script>