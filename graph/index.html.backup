<!DOCTYPE html>
<html lang="fr">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<style type="text/css">
		.link { stroke: black;
			stroke-width: 1px; }
		circle {
			opacity: 0.5;
		}
		text {
			paint-order: stroke;
			stroke-opacity: 0.5;
		}
		.node, .labels:hover{
			cursor: pointer;
		}
		/*.edgelabel {
			stroke: black;
			paint-order: stroke;
			stroke-opacity: 0.2;
		}*/
		svg:active{
			cursor: move;
		}
	</style>
</head>
<body>
<div>
	Fonctionnement de l'Union Européenne 
	<a href="https://europa.eu/european-union/about-eu/institutions-bodies_fr">
		Sources
	</a> 
	<a href="/graph/3d/">En 3D</a>
</div>
</body>
<script src="https://d3js.org/d3.v4.min.js" type="text/javascript"></script>
<script src="https://d3js.org/d3-selection-multi.v1.js"></script>
<script type="text/javascript">
var color = d3.scaleOrdinal(d3.schemeCategory20);
var labelColors = d3.scaleOrdinal(['#404040', 'white', '#ffd617', '#004494' ]);
var idColors = d3.scaleOrdinal(
	[
	'DarkOrange ',
	'DarkRed',
	"DarkGreen",
	"DarkMagenta",
	"DarkCyan",
	"DarkBlue",
	"DarkSalmon"
	]);
var width = window.innerWidth - 40, height = window.innerHeight - 40, radius = 0;
var svg = d3.select("body")
.append("svg")
.attr("width", width)
.attr("height", height)
.call(d3
	.zoom()
	.on("zoom", function () {
		svg
		.attr("transform", d3
			.event
			.transform
		)
	})
)
.append("g");
var node;
var link;
var label;

svg
	.append('defs')
	.append('marker')
	.attrs({
		'id':'arrowhead',
		'viewBox':'-0 -5 10 10',
		'refX':13,
		'refY':0,
		'orient':'auto',
		'markerWidth':13,
		'markerHeight':13,
		'xoverflow':'visible'
	})
	.append('svg:path')
	.attr('d', 'M 0,-5 L 10 ,0 L 0,5')
	.attr('fill', '#999')
	.style('stroke','none')
	;

var simulation = d3
	.forceSimulation()
	.force("link", d3
		.forceLink()
		.id(function (d) {return d.id;})
		.distance(function(d){ 
			return (d.type.length * 2 + 100)
		})
	)
	.force("collide",d3.forceCollide(function(d){return d.id + 0.5}).strength(1).radius(40))
	// .force("collide",d3.forceCollide())
	.force("charge", d3.forceManyBody().strength(-1500))
	.force("center", d3.forceCenter(width / 2, height / 2))
;
d3.json("graph.json", function (error, graph) {
if (error) throw error;

graph.links = graph.links.filter(l => l.type != ("REPRESENTE"));
graph.links = graph.links.filter(l => l.type != ("EST AFFILIE AU PARTI"));
graph.links = graph.links.filter(l => l.type != ("FAIT PARTIE DES"));

graph.nodes = graph.nodes.filter(n => n.label != ("Personne"));
update(graph.links, graph.nodes);
})
function update(links, nodes) {

link = svg
	.selectAll(".link")
	.data(links)
	.enter()
	.append("line")
	.attr("class", "link")
	.style("stroke", function(d) {return (color(d.source));})
	.attr('marker-end','url(#arrowhead)');

link
	.append("title")
	.text(function (d) {return d.type;});

edgepaths = svg
	.selectAll(".edgepath")
	.data(links)
	.enter()
	.append('path')
	.attrs({
		'class': 'edgepath',
		'fill-opacity': 0,
		'stroke-opacity': 0,
		'id': function (d, i) {return 'edgepath' + i}
	})
	.style("pointer-events", "none");

edgelabels = svg
	.selectAll(".edgelabel")
	.data(links)
	.enter()
	.append('text')
	.style("pointer-events", "none")
	.attrs({
		'class': 'edgelabel',
		'id': function (d, i) {return 'edgelabel' + i},
		'font-size': 10,
		'font-family': "Roboto",
		'fill': 'black'
	})
	.style("fill", function(d) {return color(d.source)})
	;
edgelabels
	.append('textPath')
	.attr('xlink:href', function (d, i) {return '#edgepath' + i})
	.style("text-anchor", "middle")
	.style("pointer-events", "none")
	.attr("startOffset", "50%")
	.text(function (d) {return d.type})
	;

node = svg
	.append("g")
	.attr("class", "node")
	.selectAll("circle")
	.data(nodes)
	.enter()
	.append("circle")
	.attr("r", 20)
	.attr("stroke", "black")
	.attr("stroke-width", 1)
	.style("fill", function (d, i) {return color(d.id);})
	.call(d3.drag()
		.on("start", dragstarted)
		.on("drag", dragged)
			// .on("end", dragended)
	);

label = svg
	.append("g")
	.attr("class", "labels")
	.selectAll("text")
	.data(nodes)
	.enter()
	.append("text")
	.attr('text-anchor', 'middle')
	.style("font-family", "Roboto")
	.style("font-size", 10)
	.style("fill", "black")
	.attr("stroke-width", "1px")
	.text(function (d) {return d.id})
	.call(d3
		.drag()
		.on("start", dragstarted)
		.on("drag", dragged)
	)
	.attr("stroke", function (d) {return labelColors(d.label)})
	;

node
	.on("mouseover", function (d) {
		node
			.style('opacity', function(n) {
				if (d === n)
					return 0.9;
				else
					return 0.5;
			
		});
		node
			.style('r', function(l) {
				if (d === l )
					return 30;
				else
					return 20;
			
		});
		link
			.style('opacity', function(l) {
				if (d === l.source || d === l.target)
					return 1;
				else
					return 0.5;
			
		});
		link
			.style('stroke-width', function(l) {
				if (d === l.source || d === l.target)
					return 2.5;
				else
					return 1;
		});
		link
			.style('stroke-dasharray', function(l) {
				if (d === l.target)
					return "5, 5";
				else
					return null;
		});
})

simulation
	.nodes(nodes)
	.on("tick", ticked);
simulation
	.force("link")
	.links(links);
}

function ticked() {

	svg
		.attr("width", window.innerWidth);
	link
		.attr("x1", function (d) {return d.source.x;})
		.attr("y1", function (d) {return d.source.y;})
		.attr("x2", function (d) {return d.target.x;})
		.attr("y2", function (d) {return d.target.y;});
	node
		.attr("transform", function (d) {return "translate(" + d.x + ", " + d.y + ")";});
	edgepaths
		.attr('d', function (d) {
			return 'M ' + d.source.x + ' ' + d.source.y + ' L ' + d.target.x + ' ' + d.target.y;
		})
		;
	edgelabels.attr('transform', function (d) {
		if (d.target.x < d.source.x) {
			var bbox = this
				.getBBox();
			rx = bbox.x + bbox.width / 2;
			ry = bbox.y + bbox.height / 2 ;
			return 'rotate(180 ' + rx + ' ' + ry + ')';
		}
		else {
			return 'rotate(0)';
		}
	});
	label
		.attr("x", function(d) { return d.x; })
		.attr("y", function (d) { return d.y; })
}

function dragstarted(d) {
	if (!d3.event.active) simulation.alphaTarget(0.3).restart()
	d.fx = d.x;
	d.fy = d.y;
}

function dragged(d) {
	d.fx = d3.event.x;
	d.fy = d3.event.y;
}

function dragended(d) {
	if (!d3.event.active) simulation.alphaTarget(0);
	d.fx = undefined;
	d.fy = undefined;
}

</script>
</html>